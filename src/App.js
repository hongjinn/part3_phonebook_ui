import { useState, useEffect } from 'react'
import PersonList from './Components/PersonList.js'
import NewContact from './Components/NewContact.js'
import Message from './Components/Message.js'
import Search from './Components/Search.js'
import phonebookService from './services/phonebook.js'

const App = () => {

  const [persons, set_persons] = useState([])
  const [message, set_message] = useState('')
  const [new_name, set_new_name] = useState('')
  const [new_number, set_new_number] = useState('')
  const [search_term, set_search_term] = useState('')

  // Temporary code, delete later, id should be generated by server
  const get_max_id = () => {
    return Math.max(...persons.map(person => person.id))
  }

  useEffect(() => {
    console.log("Getting persons from server for the first time")
    phonebookService.get_all()
    .then(response => {
      if (response.ok === true) {
        console.log(`Successfully hit API`)
        return response.json()
      } else {
        throw new Error(`Bad response from server ${response.status}`)
      }
    })
    .then(data => {
      console.log(data)
      set_persons(data)
    })
    .catch(error => console.log(error))
  }, [])
  

  const handle_new_person = (e) => {
    e.preventDefault()
    console.log(`User wants to add new person`)
    if (new_name.trim() === '' || new_number.trim() === '') {
      alert(`Enter both a new name and person before submitting`)
      return false
    }

    const person_to_add = {
      "id": get_max_id() + 1,
      "name": new_name,
      "number": new_number
    }

    phonebookService.create_person(person_to_add)
    .then(response => {
      if (response.ok === true) {
        console.log(`Successfully added ${person_to_add.name} to server`)
        return response.json()
      } else {
        set_message('WARNING: Issue with the server')
        setTimeout(() => {
          set_message('')
        }, 1000)
        throw new Error(`Something went wrong with POST request ${response.status}`)
      }
    })
    .then(data => {
      console.log(data)
      set_persons(persons.concat(data))
      set_new_name('')
      set_new_number('')
  
      set_message(`SUCCESS: Added ${person_to_add.name}`)
      setTimeout(() => {
        set_message('')
      }, 1000)
    })
    .catch(error => console.log(error))

  }


  const handle_delete_person = (person_to_delete) => {
    console.log(`User wants to delete id: ${person_to_delete.id}`)

    phonebookService.delete_person(person_to_delete.id)
    .then(response => {
      if (response.ok === true) {
        set_persons(persons.filter(person => person.id !== person_to_delete.id))
        set_message(`SUCCESS: Deleted ${person_to_delete.name}`)
        setTimeout(() => {
          set_message('')
        }, 1000)
      } else {
        set_message('WARNING: Issue with the server')
        setTimeout(() => {
          set_message('')
        }, 1000)
        throw new Error(`Something went wrong with POST request ${response.status}`)        
      }
    })
    .catch(error => console.log(error))

  }
  
  const persons_to_display = persons.filter(person => {
    return person.name.toLowerCase().includes(search_term.toLowerCase())
  })

  return (
    <div
      style={{margin: '10px'}}
    >
      <h1>Phonebook</h1>

      <Message
        message={message}
      />

      Search
      <Search
        search_term={search_term}
        set_search_term={set_search_term}
      />

      <h2>Add a new contact</h2>
      <NewContact 
        handle_new_person={handle_new_person}
        new_name={new_name}
        set_new_name={set_new_name}
        new_number={new_number}
        set_new_number={set_new_number}
      />

      <h2>Persons</h2>
      <PersonList
        persons_to_display={persons_to_display}
        handle_delete_person={handle_delete_person}
        set_persons={set_persons}
        persons={persons}
        set_message={set_message}
      />

      <hr />
      <small>A Full Stack Open exercise</small>

    </div>
  )
}

export default App;
